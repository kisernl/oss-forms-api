# OSS Forms API - Environment Variables Example
# Copy this file to .env and update the values for your deployment

# =============================================================================
# API AUTHENTICATION
# =============================================================================

# Comma-separated list of valid API keys for accessing the form submission endpoint
# Generate secure random keys for production use
# Example: VALID_API_KEYS=your-secret-key-1,another-secret-key-2,client-api-key-3
VALID_API_KEYS=dev-key-12345

# =============================================================================
# EMAIL CONFIGURATION
# =============================================================================

# Default sender email address for form submissions
# This email must be verified in AWS SES before use
# Example: SES_DEFAULT_SENDER=noreply@yourdomain.com
SES_DEFAULT_SENDER=noreply@example.com

# =============================================================================
# AWS CONFIGURATION
# =============================================================================

# AWS region for SES service (optional, defaults to us-east-1)
# AWS_REGION=us-east-1

# AWS credentials are typically provided by:
# - AWS Lambda execution role (for deployed lambda)
# - AWS CLI configuration (~/.aws/credentials)
# - Environment variables (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)
# - IAM instance profile (for EC2)

# =============================================================================
# DEPLOYMENT CONFIGURATION
# =============================================================================

# Serverless deployment stage (dev, staging, prod)
# STAGE=dev

# AWS region for deployment
# REGION=us-east-1

# =============================================================================
# SECURITY NOTES
# =============================================================================
# 
# 1. Never commit this file with real secrets to version control
# 2. Use strong, randomly generated API keys in production
# 3. Verify your sender email in AWS SES console
# 4. Set up proper IAM permissions for SES access
# 5. Consider using AWS Secrets Manager for sensitive values in production